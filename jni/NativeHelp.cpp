/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
#include <stdio.h>
#include <opencv2/opencv.hpp>
using namespace cv;
/* Header for class com_example_a12852_opencvtestdemo_tools_NativeHelp */

#ifndef _Included_com_example_a12852_opencvtestdemo_tools_NativeHelp
#define _Included_com_example_a12852_opencvtestdemo_tools_NativeHelp
//log标签
#define  LOG_TAG    "native_help"
//定义info信息
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
//定义debug信息
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
//定义error信息
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_a12852_opencvtestdemo_tools_NativeHelp
 * Method:    testInt
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_testInt
  (JNIEnv *env, jclass c){
    LOGI("I am a int test");
    return 20;
  };

/*
 * Class:     com_example_a12852_opencvtestdemo_tools_NativeHelp
 * Method:    testString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_testString
  (JNIEnv *env, jclass c)
{
    LOGI("I am a String test ");
    return env->NewStringUTF("JNI test");
  };


JNIEXPORT jstring JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_setStudent
(JNIEnv * env, jclass c, jobject obj){
    jclass stu_class = env ->GetObjectClass(obj);

    jfieldID ageFieldID = env->GetFieldID(stu_class,"age","I");//获得属性ID--age

    jfieldID nameFieldID = env->GetFieldID(stu_class,"name","Ljava/lang/String;");//获得属性ID--name

    jint age = env->GetIntField(obj,ageFieldID);//获得属性值age

    jstring jname = (jstring)env->GetObjectField(obj,nameFieldID);//获得属性值name

    const char * name = env->GetStringUTFChars(jname,NULL);//将String转换为Char *

    return jname;
};

JNIEXPORT jobject JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_getStudent
        (JNIEnv *env, jclass c){
    jclass student_class = env->FindClass("com/example/a12852/opencvtestdemo/entity/Student");
    //获取对象的无参构造方法
    jmethodID student_class_id = env->GetMethodID(student_class,"<init>","()V");
    //创建一个jstring，用于赋值
    jstring name = env->NewStringUTF("I am 徐");
    //创建一个类对象，参数列表（对象类，对象构造方法）
    jobject student = env->NewObject(student_class,student_class_id);
    /*
     * 获取对象属性的fieldID,参数列表（对象类，属性名称，属性类型）
     */
    jfieldID name_id = env->GetFieldID(student_class,"name","java/lang/String");
    jfieldID age_id = env->GetFieldID(student_class,"age","I");
    /*
     * 设置对象的值，参数列表（对象，对象属性的jfieldID,属性值）
     * */
    env->SetIntField(student,age_id,111);
    env->SetObjectField(student,name_id,name);
    return student;
};

JNIEXPORT jintArray JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_testBitMap
        (JNIEnv *env, jclass c, jintArray srcArray, jint width, jint height){

    jint * cbuf;
    cbuf = env->GetIntArrayElements(srcArray,JNI_FALSE);
    Mat src = Mat(height,width,CV_8UC4,(unsigned char *) cbuf).clone();
/*    Mat tag = Mat(height,width,CV_8UC4);
    cvtColor(src,tag,COLOR_RGB2HSV);
    Canny(tag, tag, 30.0, 90.0, 3, true);*/
    uchar* ptr = src.ptr(0);
    for(int i = 0; i < width*height; i ++){
        //计算公式：Y(亮度) = 0.299*R + 0.587*G + 0.114*B
        //对于一个int四字节，其彩色值存储方式为：BGRA
        int grayScale = (int)(ptr[4*i+2]*0.299 + ptr[4*i+1]*0.587 + ptr[4*i+0]*0.114);
        ptr[4*i+1] = grayScale;
        ptr[4*i+2] = grayScale;
        ptr[4*i+0] = grayScale;
    }
    int size = width * height;
    jintArray tagArray = env->NewIntArray(size);
    env->SetIntArrayRegion(tagArray,0,size,cbuf);
    return tagArray;
}

JNIEXPORT jobject JNICALL Java_com_example_a12852_opencvtestdemo_tools_NativeHelp_getHashMap
        (JNIEnv * env, jclass c){
    //找到hashmap类
    jclass hashmap_class = env->FindClass("java/util/HashMap");
    //创建hashmap的空初始化方法
    jmethodID hashmap_method_init = env->GetMethodID(hashmap_class,"<init>","()V");
    /*
     * 创建hashmap的put方法
     * 参数列表（对象类，对象方法名称，方法参数和返回值列表，语法{"(参数1;参数2;)返回值类型;"}）
     * 注意：参数对象需以“;”分离，结尾也需添加“;”,不能少
     */
    jmethodID hashmap_method_put = env->GetMethodID(hashmap_class,"put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    //创建hashmap对象，参数列表（对象类，对象构造方法）
    jobject hashmap_obj = env->NewObject(hashmap_class,hashmap_method_init);
    //执行hashmap的put方法,参数列表（执行方法的对象，执行的方法ID,参数列表）
    env->CallObjectMethod(hashmap_obj,hashmap_method_put,env->NewStringUTF("banana"),env->NewStringUTF("香蕉"));
    env->CallObjectMethod(hashmap_obj,hashmap_method_put,env->NewStringUTF("apple"),env->NewStringUTF((char *)"苹果"));
    return hashmap_obj;
}


#ifdef __cplusplus
}
#endif
#endif
